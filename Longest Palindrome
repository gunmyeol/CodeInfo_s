class Solution {
    public int longestPalindrome(String s) {
        char[] s_Sort = s.toCharArray();
        int result = 0;
        int maxOddDupCount = 0;
        Arrays.sort(s_Sort);
        s = new String(s_Sort);
        String maxKey = "";

        int dupCount = 1;
        Map<Character, Integer> dupStore = new HashMap<Character, Integer>();

        for(int i = 0; i < s.length(); i++) {
            if(dupStore.containsKey(s.charAt(i))) {
                dupCount += 1;
                dupStore.put(s.charAt(i), dupCount);
            }
            else {
                dupCount = 1;
                dupStore.put(s.charAt(i), dupCount);
            }
        }

        Set<Character> keySet = dupStore.keySet();
        for (Character key : keySet) {
            if(dupStore.get(key) % 2 == 0) {
                result += dupStore.get(key);
            }
            else {
                if(maxOddDupCount < dupStore.get(key)) {
                    maxOddDupCount = dupStore.get(key);
                    maxKey = String.valueOf(key);
                }
            }
        }

        for (Character key : keySet) {
            if(String.valueOf(key).equals(maxKey)) {
                continue;
            }
            else {
                if(dupStore.get(key) % 2 == 1) {
                    result += (dupStore.get(key) - 1);
                }
            }
        }
        
        return (result + maxOddDupCount);
    }
}   
